#!/usr/bin/env ruby
require 'open3'
require 'pathname'
require 'rbconfig'

class DevTool
  MAIN_HELP_BANNER = <<HEREDOC
Execute various commands within the developer environment

Usage:
  dev [COMMAND] [ARGS...]"
  dev -h|--help

Commands:
  compose            Manage containers (default)
  machine            Manage the virtual machine
  update             Update Dash developer environment

Machine subcommands:
  create-cluster
  destroy
  up
  create (overridden)
  stop (overridden)

HEREDOC

  TOP_COMMANDS=%w{compose machine update}

  def initialize(args)
    if args.empty?
      help
    elsif TOP_COMMANDS.include?(args[0])
      send(args.shift.to_sym, args)
    else
      send(:compose, args)
    end
  end

  def help
    puts MAIN_HELP_BANNER
  end

  def compose(args)
    if (Pathname.pwd + 'docker-compose.yml').file?
      project_dir = '.'
    else
      project_dir = `git rev-parse --show-toplevel`.chomp
      if $? != 0
        puts 'Warning: unable to automatically detect project dir'
        project_dir = '.'
      end
    end

    Dir.chdir(project_dir) do
      if args.empty?
        puts `docker-compose --help`
      else
        if (Pathname.pwd + 'docker-compose.override.yml').file?
          args.unshift('-f docker-compose.override.yml')
        end
        if (Pathname.pwd + 'development.yml').file?
          args.unshift('-f development.yml')
        end

        args.unshift('docker-compose -f docker-compose.yml')
        exec(args.join(' '))
      end
    end
  end

  def machine(args)
    if args.empty?
      puts `docker-machine --help`
    elsif args.first == 'env'
      args.shift
      machine_name = 'default'
      unless args.first.nil?
        machine_name = args.first
      end
      if `docker-machine status #{machine_name}` =~ /Running/
        system("docker-machine env #{machine_name}")
      else
        $stderr.puts "#{machine_name} is not running"
      end
    elsif args.first == 'create'
      puts 'Running `dinghy create` (ignoring args)'
      system('sudo ls > /dev/null')
      system('dinghy create')
      unless system("#{root_dir}/docker/provision-dinghy.sh")
        $stderr.puts "Failed to provision!"
        exit 1
      end
      system('dinghy restart')
      system('eval $(dinghy env); docker start dns > /dev/null')
    elsif args.first == 'create-cluster'
      system('sudo ls > /dev/null')
      exec("#{root_dir}/docker/start-cluster.sh")
    elsif args.first == 'up'
      puts 'Running `dinghy up` (ignoring args)'
      system('sudo ls > /dev/null')
      exec('dinghy up')
    elsif args.first == 'stop'
      puts 'Running `dinghy stop` (ignoring args)'
      system('sudo ls > /dev/null')
      exec('dinghy stop')
    elsif args.first == 'destroy'
      puts 'Running `dinghy destroy` (ignoring args)'
      system('sudo ls > /dev/null')
      exec('dinghy destroy')
    else
      args.unshift('docker-machine')
      exec(args.join(' '))
    end
  end

  def update(args)
    system('cd /usr/local/dev-env && git fetch && git reset --hard origin/master') unless args.first == '--no-pull'
    exec("ansible-playbook #{root_dir}/ansible/mac.yml -i 127.0.0.1, -K") if mac?
    exec("ansible-playbook #{root_dir}/ansible/linux.yml -i 127.0.0.1, -K -v") if linux?
  end

  def root_dir
    '/usr/local/dev-env'
  end

  def mac?
    RbConfig::CONFIG['host_os'] =~ /darwin/
  end

  def linux?
    RbConfig::CONFIG['host_os'] =~ /linux/
  end
end

DevTool.new(ARGV) if __FILE__==$0
